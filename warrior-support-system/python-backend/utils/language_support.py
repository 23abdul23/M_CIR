"""
Bilingual Language Support for Army Mental Health Assessment System
"""
import streamlit as st
from typing import Dict, Any

# Language translations
TRANSLATIONS = {
    "en": {
        # Main headers
        "app_title": "Army Mental Health Assessment System",
        "login_header": "Login",
        "admin_dashboard": "Admin Dashboard",
        "user_dashboard": "User Dashboard",
        
        # Login page
        "username": "Username",
        "password": "Password",
        "login_button": "Login",
        "welcome_message": "Welcome, {}!",
        "invalid_credentials": "Invalid username or password",
        "fill_all_fields": "Please fill all fields",
        "default_admin_info": "Default Admin Login:",
        
        # Navigation
        "questionnaire_management": "Questionnaire Management",
        "user_management": "User Management",
        "reports": "Reports",
        "system_settings": "System Settings",
        "take_assessment": "Take Assessment",
        "voice_assessment": "Voice Assessment",
        "facial_analysis": "Facial Analysis",
        "my_results": "My Results",
        "logout": "Logout",
        
        # Questionnaire Management
        "load_sample_questionnaires": "Load Sample Questionnaires",
        "refresh_questionnaire_list": "Refresh Questionnaire List",
        "questionnaires_loaded": "{} questionnaires loaded successfully",
        "questionnaires_failed": "{} questionnaires failed to load",
        "no_questionnaires": "No questionnaires available. Please load sample questionnaires.",
        "select_questionnaire_details": "Select questionnaire to view details:",
        "description": "Description",
        "assessment_instructions": "Instructions",
        "time_limit": "Time Limit",
        "minutes": "minutes",
        "start_assessment": "Start Assessment",
        "question": "Question",
        "select_answer": "Select your answer:",
        "previous_question": "Previous Question",
        "next_question": "Next Question",
        "assessment_complete": "Assessment Complete!",
        "view_results": "View Results",
        "assessment_results": "Assessment Results",
        "total_score": "Total Score",
        "percentage": "Percentage",
        "risk_level": "Risk Level",
        "assessment": "Assessment",
        "status": "Status",
        "score": "Score",
        "mental_state": "Mental State",
        "completed": "Completed",
        "suggestions": "Suggestions",
        "results_saved": "Results saved successfully",
        "error_saving_results": "Error saving results",
        "please_try_again": "Please try again",
        "error_loading_results": "Error loading results",
        "no_assessment_results": "No assessment results available",
        "complete_assessment_first": "Please complete an assessment first",
        "suggestions_not_available": "Suggestions not available",
        "voice_assessment": "Voice Assessment",
        "record_voice": "Record your voice",
        "analyze": "Analyze",
        "analysis_result": "Analysis Result",
        "sentiment": "Sentiment",
        
        # User Management
        "create_new_user": "Create New User",
        "full_name": "Full Name",
        "email": "Email",
        "role": "Role",
        "army_id": "Army ID",
        "rank": "Rank",
        "unit": "Unit",
        "create_user": "Create User",
        "user_created": "User '{}' created successfully",
        "user_creation_error": "Error creating user: {}",
        "required_fields": "Please fill required fields",
        
        # Reports
        "reports_analysis": "Reports and Analysis",
        "total_assessments": "Total Assessments",
        "completed_assessments": "Completed Assessments",
        "completion_rate": "Completion Rate",
        "mental_state_distribution": "Mental State Distribution",
        
        # Assessment
        "assessment_instructions": "Instructions",
        "time_limit": "Time Limit",
        "minutes": "minutes",
        "start_assessment": "Start Assessment",
        "question": "Question",
        "select_answer": "Select your answer:",
        "previous_question": "Previous Question",
        "next_question": "Next Question",
        "assessment_complete": "Assessment Complete!",
        "view_results": "View Results",
        "assessment_results": "Assessment Results",
        "total_score": "Total Score",
        "percentage": "Percentage",
        "risk_level": "Risk Level",
        "results_saved": "Results saved",
        "result_save_error": "Error saving results: {}",
        "start_new_assessment": "Start New Assessment",
        
        # Voice Assessment
        "voice_instructions": "Instructions:",
        "voice_instruction_1": "1. Answer the question below in Hindi",
        "voice_instruction_2": "2. Press record button to record your answer",
        "voice_instruction_3": "3. Or type in the text box",
        "select_question": "Select Question:",
        "type_response": "Type your response here:",
        "or_voice_input": "Or provide voice input:",
        "upload_audio": "Upload Audio File",
        "analyze_response": "Analyze Response",
        "audio_processing": "Processing audio...",
        "audio_processed": "Audio processed successfully!",
        "transcribed_text": "Transcribed Text:",
        "audio_processing_error": "Audio processing error: {}",
        
        # Analysis Results
        "sentiment_analysis": "Sentiment Analysis",
        "sentiment": "Sentiment",
        "score": "Score",
        "confidence": "Confidence",
        "keyword_analysis": "Keyword Analysis",
        "mental_state": "Mental State",
        "risk_score": "Risk Score",
        "suggestions": "Suggestions",
        "positive": "Positive",
        "negative": "Negative",
        "neutral": "Neutral",
        "normal": "Normal",
        "mild": "Mild",
        "moderate": "Moderate",
        "severe": "Severe",
        
        # Results
        "no_results": "No assessment results available",
        "status": "Status",
        "completed": "Completed",
        
        # System Settings
        "database_management": "Database Management",
        "load_default_keywords": "Load Default Keywords",
        "load_default_suggestions": "Load Default Suggestions",
        "keywords_loaded": "Default keywords loaded",
        "suggestions_loaded": "Default suggestions loaded",
        "keyword_load_error": "Error loading keywords: {}",
        "suggestion_load_error": "Error loading suggestions: {}",
        
        # Language
        "language": "Language",
        "select_language": "Select Language:",
        "english": "English",
        "hindi": "‡§π‡§ø‡§Ç‡§¶‡•Ä",

        # Facial Analysis
        "facial_behavior_analysis": "Facial Behavior Analysis",
        "analysis_settings": "Analysis Settings",
        "analysis_duration": "Analysis Duration (seconds)",
        "analysis_type": "Analysis Type",
        "general_assessment": "General Assessment",
        "stress_analysis": "Stress Analysis",
        "anxiety_indicators": "Anxiety Indicators",
        "engagement_level": "Engagement Level",
        "camera_preview": "Camera Preview",
        "test_camera": "Test Camera",
        "camera_available": "‚úÖ Camera available",
        "camera_not_available": "‚ùå Camera not available",
        "start_analysis": "üé• Start Analysis",
        "analysis_in_progress": "Analysis in progress...",
        "analysis_complete": "‚úÖ Analysis Complete",
        "analysis_summary": "Analysis Summary",
        "frames_analyzed": "Frames Analyzed",
        "average_score": "Average Score",
        "face_detection_percent": "Face Detection %",
        "duration": "Duration",
        "mental_health_indicators": "Mental Health Indicators",
        "stress_detection_rate": "Stress Detection Rate",
        "anxiety_indicators_rate": "Anxiety Indicators Rate",
        "overall_wellbeing": "Overall Wellbeing",
        "recommendations": "Recommendations",
        "results_saved": "‚úÖ Results saved",
        "privacy_notice": "üîí Privacy Notice: All video data is processed locally and not stored.",
        "facial_analysis_not_available": "Facial analysis not available. Please install required packages.",
        "camera_test_error": "Camera test error",
        "analysis_failed": "Analysis failed",
        "ensure_camera_connected": "Please ensure your camera is connected and working.",

        # Common
        "description": "Description",
        "save": "Save",
        "cancel": "Cancel",
        "edit": "Edit",
        "delete": "Delete",
        "confirm": "Confirm",
        "error": "Error",
        "success": "Success",
        "warning": "Warning",
        "info": "Info"
    },
    
    "hi": {
        # Main headers
        "app_title": "‡§∏‡•á‡§®‡§æ ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä",
        "login_header": "‡§≤‡•â‡§ó‡§ø‡§®",
        "admin_dashboard": "‡§è‡§°‡§Æ‡§ø‡§® ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°",
        "user_dashboard": "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°",
        
        # Login page
        "username": "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§æ‡§Æ",
        "password": "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°",
        "login_button": "‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç",
        "welcome_message": "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à, {}!",
        "invalid_credentials": "‡§ó‡§≤‡§§ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§æ‡§Æ ‡§Ø‡§æ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°",
        "fill_all_fields": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§≠‡§∞‡•á‡§Ç",
        "default_admin_info": "‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§è‡§°‡§Æ‡§ø‡§® ‡§≤‡•â‡§ó‡§ø‡§®:",
        
        # Navigation
        "questionnaire_management": "‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§æ‡§µ‡§≤‡•Ä ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®",
        "user_management": "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®",
        "reports": "‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü‡•ç‡§∏",
        "system_settings": "‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏",
        "take_assessment": "‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§ï‡§∞‡•á‡§Ç",
        "voice_assessment": "‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡•á ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®",
        "facial_analysis": "‡§ö‡•á‡§π‡§∞‡•á ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "my_results": "‡§Æ‡•á‡§∞‡•á ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ",
        "logout": "‡§≤‡•â‡§ó ‡§Ü‡§â‡§ü",
        
        # Questionnaire Management
        "load_sample_questionnaires": "‡§®‡§Æ‡•Ç‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§æ‡§µ‡§≤‡•Ä ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
        "refresh_questionnaire_list": "‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§æ‡§µ‡§≤‡•Ä ‡§∏‡•Ç‡§ö‡•Ä ‡§∞‡•Ä‡§´‡•ç‡§∞‡•á‡§∂ ‡§ï‡§∞‡•á‡§Ç",
        "questionnaires_loaded": "{} ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§æ‡§µ‡§≤‡•Ä ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≤‡•ã‡§° ‡§ï‡•Ä ‡§ó‡§à‡§Ç",
        "questionnaires_failed": "{} ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§æ‡§µ‡§≤‡•Ä ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡•Ä‡§Ç",
        "no_questionnaires": "‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§æ‡§µ‡§≤‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§Æ‡•Ç‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§æ‡§µ‡§≤‡•Ä ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§",
        "select_questionnaire_details": "‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§æ‡§µ‡§≤‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "description": "‡§µ‡§ø‡§µ‡§∞‡§£",
        "assessment_instructions": "‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂",
        "time_limit": "‡§∏‡§Æ‡§Ø ‡§∏‡•Ä‡§Æ‡§æ",
        "minutes": "‡§Æ‡§ø‡§®‡§ü",
        "start_assessment": "‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
        "question": "‡§™‡•ç‡§∞‡§∂‡•ç‡§®",
        "select_answer": "‡§Ö‡§™‡§®‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "previous_question": "‡§™‡§ø‡§õ‡§≤‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®",
        "next_question": "‡§Ö‡§ó‡§≤‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®",
        "assessment_complete": "‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§™‡•Ç‡§∞‡•ç‡§£!",
        "view_results": "‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§¶‡•á‡§ñ‡•á‡§Ç",
        "assessment_results": "‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ",
        "total_score": "‡§ï‡•Å‡§≤ ‡§∏‡•ç‡§ï‡•ã‡§∞",
        "percentage": "‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§",
        "risk_level": "‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§∏‡•ç‡§§‡§∞",
        "assessment": "‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®",
        "status": "‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
        "score": "‡§∏‡•ç‡§ï‡•ã‡§∞",
        "mental_state": "‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
        "completed": "‡§™‡•Ç‡§∞‡•ç‡§£",
        "suggestions": "‡§∏‡•Å‡§ù‡§æ‡§µ",
        "results_saved": "‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§∏‡§π‡•á‡§ú‡•á ‡§ó‡§è",
        "error_saving_results": "‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§∏‡§π‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
        "please_try_again": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç",
        "error_loading_results": "‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
        "no_assessment_results": "‡§ï‡•ã‡§à ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à",
        "complete_assessment_first": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á ‡§è‡§ï ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§∞‡•á‡§Ç",
        "suggestions_not_available": "‡§∏‡•Å‡§ù‡§æ‡§µ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç",
        "voice_assessment": "‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡•á ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®",
        "record_voice": "‡§Ö‡§™‡§®‡•Ä ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§∞‡•á‡§Ç",
        "analyze": "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç",
        "analysis_result": "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ",
        "sentiment": "‡§≠‡§æ‡§µ‡§®‡§æ",
        
        # User Management
        "create_new_user": "‡§®‡§Ø‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç",
        "full_name": "‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ",
        "email": "‡§à‡§Æ‡•á‡§≤",
        "role": "‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ",
        "army_id": "‡§∏‡•á‡§®‡§æ ‡§Ü‡§à‡§°‡•Ä",
        "rank": "‡§∞‡•à‡§Ç‡§ï",
        "unit": "‡§Ø‡•Ç‡§®‡§ø‡§ü",
        "create_user": "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç",
        "user_created": "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ '{}' ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ",
        "user_creation_error": "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {}",
        "required_fields": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§≠‡§∞‡•á‡§Ç",
        
        # Reports
        "reports_analysis": "‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü‡•ç‡§∏ ‡§î‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "total_assessments": "‡§ï‡•Å‡§≤ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®",
        "completed_assessments": "‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®",
        "completion_rate": "‡§™‡•Ç‡§∞‡•ç‡§£‡§§‡§æ ‡§¶‡§∞",
        "mental_state_distribution": "‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§µ‡§ø‡§§‡§∞‡§£",
        
        # Assessment
        "assessment_instructions": "‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂",
        "time_limit": "‡§∏‡§Æ‡§Ø ‡§∏‡•Ä‡§Æ‡§æ",
        "minutes": "‡§Æ‡§ø‡§®‡§ü",
        "start_assessment": "‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
        "question": "‡§™‡•ç‡§∞‡§∂‡•ç‡§®",
        "select_answer": "‡§Ö‡§™‡§®‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "previous_question": "‡§™‡§ø‡§õ‡§≤‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®",
        "next_question": "‡§Ö‡§ó‡§≤‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®",
        "assessment_complete": "‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§™‡•Ç‡§∞‡•ç‡§£!",
        "view_results": "‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§¶‡•á‡§ñ‡•á‡§Ç",
        "assessment_results": "‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ",
        "total_score": "‡§ï‡•Å‡§≤ ‡§∏‡•ç‡§ï‡•ã‡§∞",
        "percentage": "‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§",
        "risk_level": "‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§∏‡•ç‡§§‡§∞",
        "results_saved": "‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§∏‡§π‡•á‡§ú‡•á ‡§ó‡§è",
        "result_save_error": "‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§∏‡§π‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {}",
        "start_new_assessment": "‡§®‡§Ø‡§æ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
        
        # Voice Assessment
        "voice_instructions": "‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂:",
        "voice_instruction_1": "1. ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¶‡•á‡§Ç",
        "voice_instruction_2": "2. ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§ï‡§∞ ‡§Ö‡§™‡§®‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§∞‡•á‡§Ç",
        "voice_instruction_3": "3. ‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§¨‡•â‡§ï‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç",
        "select_question": "‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "type_response": "‡§Ø‡§π‡§æ‡§Å ‡§Ö‡§™‡§®‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§≤‡§ø‡§ñ‡•á‡§Ç:",
        "or_voice_input": "‡§Ø‡§æ ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡•á ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç:",
        "upload_audio": "‡§ë‡§°‡§ø‡§Ø‡•ã ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
        "analyze_response": "‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç",
        "audio_processing": "‡§ë‡§°‡§ø‡§Ø‡•ã ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...",
        "audio_processed": "‡§ë‡§°‡§ø‡§Ø‡•ã ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§π‡•Å‡§Ü!",
        "transcribed_text": "‡§ü‡•ç‡§∞‡§æ‡§Ç‡§∏‡§ï‡•ç‡§∞‡§æ‡§á‡§¨ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü:",
        "audio_processing_error": "‡§ë‡§°‡§ø‡§Ø‡•ã ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {}",
        
        # Analysis Results
        "sentiment_analysis": "‡§≠‡§æ‡§µ‡§®‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "sentiment": "‡§≠‡§æ‡§µ‡§®‡§æ",
        "score": "‡§∏‡•ç‡§ï‡•ã‡§∞",
        "confidence": "‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏",
        "keyword_analysis": "‡§ï‡•Ä‡§µ‡§∞‡•ç‡§° ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "mental_state": "‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
        "risk_score": "‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§∏‡•ç‡§ï‡•ã‡§∞",
        "suggestions": "‡§∏‡•Å‡§ù‡§æ‡§µ",
        "positive": "‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï",
        "negative": "‡§®‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï",
        "neutral": "‡§§‡§ü‡§∏‡•ç‡§•",
        "normal": "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø",
        "mild": "‡§π‡§≤‡•ç‡§ï‡§æ",
        "moderate": "‡§Æ‡§ß‡•ç‡§Ø‡§Æ",
        "severe": "‡§ó‡§Ç‡§≠‡•Ä‡§∞",
        
        # Results
        "no_results": "‡§ï‡•ã‡§à ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à",
        "status": "‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
        "completed": "‡§™‡•Ç‡§∞‡•ç‡§£",
        
        # System Settings
        "database_management": "‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®",
        "load_default_keywords": "‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§ï‡•Ä‡§µ‡§∞‡•ç‡§° ‡§∏‡•á‡§ü ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
        "load_default_suggestions": "‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
        "keywords_loaded": "‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§ï‡•Ä‡§µ‡§∞‡•ç‡§° ‡§∏‡•á‡§ü ‡§≤‡•ã‡§° ‡§ï‡§ø‡§è ‡§ó‡§è",
        "suggestions_loaded": "‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§≤‡•ã‡§° ‡§ï‡§ø‡§è ‡§ó‡§è",
        "keyword_load_error": "‡§ï‡•Ä‡§µ‡§∞‡•ç‡§° ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {}",
        "suggestion_load_error": "‡§∏‡•Å‡§ù‡§æ‡§µ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {}",
        
        # Language
        "language": "‡§≠‡§æ‡§∑‡§æ",
        "select_language": "‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "english": "English",
        "hindi": "‡§π‡§ø‡§Ç‡§¶‡•Ä",

        # Facial Analysis
        "facial_behavior_analysis": "‡§ö‡•á‡§π‡§∞‡•á ‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "analysis_settings": "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏",
        "analysis_duration": "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Ö‡§µ‡§ß‡§ø (‡§∏‡•á‡§ï‡§Ç‡§°)",
        "analysis_type": "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞",
        "general_assessment": "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®",
        "stress_analysis": "‡§§‡§®‡§æ‡§µ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "anxiety_indicators": "‡§ö‡§ø‡§Ç‡§§‡§æ ‡§∏‡§Ç‡§ï‡•á‡§§‡§ï",
        "engagement_level": "‡§ú‡•Å‡§°‡§º‡§æ‡§µ ‡§∏‡•ç‡§§‡§∞",
        "camera_preview": "‡§ï‡•à‡§Æ‡§∞‡§æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§µ‡§≤‡•ã‡§ï‡§®",
        "test_camera": "‡§ï‡•à‡§Æ‡§∞‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£",
        "camera_available": "‚úÖ ‡§ï‡•à‡§Æ‡§∞‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•à",
        "camera_not_available": "‚ùå ‡§ï‡•à‡§Æ‡§∞‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç",
        "start_analysis": "üé• ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
        "analysis_in_progress": "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à...",
        "analysis_complete": "‚úÖ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡•Ç‡§∞‡•ç‡§£",
        "analysis_summary": "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂",
        "frames_analyzed": "‡§´‡•ç‡§∞‡•á‡§Æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§ø‡§§",
        "average_score": "‡§î‡§∏‡§§ ‡§∏‡•ç‡§ï‡•ã‡§∞",
        "face_detection_percent": "‡§ö‡•á‡§π‡§∞‡§æ ‡§™‡§π‡§ö‡§æ‡§® %",
        "duration": "‡§Ö‡§µ‡§ß‡§ø",
        "mental_health_indicators": "‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Ç‡§ï‡•á‡§§‡§ï",
        "stress_detection_rate": "‡§§‡§®‡§æ‡§µ ‡§∏‡§Ç‡§ï‡•á‡§§‡§ï ‡§¶‡§∞",
        "anxiety_indicators_rate": "‡§ö‡§ø‡§Ç‡§§‡§æ ‡§∏‡§Ç‡§ï‡•á‡§§‡§ï ‡§¶‡§∞",
        "overall_wellbeing": "‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§ï‡§≤‡•ç‡§Ø‡§æ‡§£",
        "recommendations": "‡§∏‡•Å‡§ù‡§æ‡§µ",
        "results_saved": "‚úÖ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§∏‡§π‡•á‡§ú‡•á ‡§ó‡§è",
        "privacy_notice": "üîí ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§∏‡•Ç‡§ö‡§®‡§æ: ‡§∏‡§≠‡•Ä ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§°‡•á‡§ü‡§æ ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π‡•Ä‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ‡•§",
        "facial_analysis_not_available": "‡§ö‡•á‡§π‡§∞‡•á ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§™‡•à‡§ï‡•á‡§ú ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "camera_test_error": "‡§ï‡•à‡§Æ‡§∞‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
        "analysis_failed": "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Ö‡§∏‡§´‡§≤",
        "ensure_camera_connected": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡§æ ‡§ï‡•à‡§Æ‡§∞‡§æ ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•à ‡§î‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à‡•§",

        # Common
        "description": "‡§µ‡§ø‡§µ‡§∞‡§£",
        "save": "‡§∏‡§π‡•á‡§ú‡•á‡§Ç",
        "cancel": "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
        "edit": "‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç",
        "delete": "‡§π‡§ü‡§æ‡§è‡§Ç",
        "confirm": "‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡§∞‡•á‡§Ç",
        "error": "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
        "success": "‡§∏‡§´‡§≤‡§§‡§æ",
        "warning": "‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä",
        "info": "‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä"
    }
}

def get_language():
    """Get current language from session state"""
    if "language" not in st.session_state:
        st.session_state.language = "hi"  # Default to Hindi
    return st.session_state.language

def set_language(lang_code: str):
    """Set current language in session state"""
    if lang_code in TRANSLATIONS:
        st.session_state.language = lang_code

def t(key: str, *args) -> str:
    """
    Translate a key to current language
    
    Args:
        key: Translation key
        *args: Arguments for string formatting
        
    Returns:
        Translated string
    """
    lang = get_language()
    translation = TRANSLATIONS.get(lang, {}).get(key, key)
    
    if args:
        try:
            return translation.format(*args)
        except:
            return translation
    
    return translation

def language_selector():
    """Display language selector in sidebar"""
    with st.sidebar:
        st.markdown("---")
        current_lang = get_language()
        
        # Language selection - Using Indian flag for both languages (Indian Army application)
        lang_options = {
            "hi": "üáÆüá≥ ‡§π‡§ø‡§Ç‡§¶‡•Ä",
            "en": "üáÆüá≥ English"
        }
        
        selected_lang = st.selectbox(
            t("select_language"),
            options=list(lang_options.keys()),
            format_func=lambda x: lang_options[x],
            index=0 if current_lang == "hi" else 1,
            key="language_selector"
        )
        
        if selected_lang != current_lang:
            set_language(selected_lang)
            st.rerun()

def get_bilingual_text(hindi_text: str, english_text: str) -> str:
    """
    Return text based on current language
    
    Args:
        hindi_text: Hindi text
        english_text: English text
        
    Returns:
        Text in current language
    """
    lang = get_language()
    if lang == "hi":
        return hindi_text
    else:
        return english_text

def display_bilingual_header(hindi_text: str, english_text: str, level: int = 1):
    """
    Display bilingual header
    
    Args:
        hindi_text: Hindi header text
        english_text: English header text
        level: Header level (1-6)
    """
    lang = get_language()
    
    if lang == "hi":
        primary_text = hindi_text
        secondary_text = english_text
    else:
        primary_text = english_text
        secondary_text = hindi_text
    
    # Display primary text
    if level == 1:
        st.markdown(f'<h1 class="main-header">{primary_text}</h1>', unsafe_allow_html=True)
    elif level == 2:
        st.markdown(f'<h2 class="section-header">{primary_text}</h2>', unsafe_allow_html=True)
    elif level == 3:
        st.markdown(f'<h3 class="section-header">{primary_text}</h3>', unsafe_allow_html=True)
    else:
        st.markdown(f'<h{level}>{primary_text}</h{level}>', unsafe_allow_html=True)
    
    # Display secondary text in smaller font
    if st.session_state.get("show_bilingual", True):
        st.markdown(f'<p style="font-size: 0.8em; color: #666; margin-top: -10px;"><em>{secondary_text}</em></p>', unsafe_allow_html=True)

def bilingual_info_box(hindi_text: str, english_text: str, box_type: str = "info"):
    """
    Display bilingual info box
    
    Args:
        hindi_text: Hindi text
        english_text: English text
        box_type: Type of box (info, warning, error, success)
    """
    lang = get_language()
    
    if lang == "hi":
        primary_text = hindi_text
        secondary_text = english_text
    else:
        primary_text = english_text
        secondary_text = hindi_text
    
    box_class = f"{box_type}-box"
    
    st.markdown(f"""
    <div class="{box_class}">
    <strong>{primary_text}</strong><br>
    <em style="font-size: 0.9em; color: #666;">{secondary_text}</em>
    </div>
    """, unsafe_allow_html=True)
