#!/usr/bin/env python3
"""
Setup script for Army Mental Health Assessment System
CPU-ONLY VERSION - No GPU dependencies
"""
import os
import sys
import subprocess
import sqlite3
from pathlib import Path

# Force CPU usage from the start - NO GPU
os.environ["CUDA_VISIBLE_DEVICES"] = ""
os.environ["TORCH_USE_CUDA"] = "0"
os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"

print("ЁЯЦея╕П System configured for CPU-only operation")

def install_requirements():
    """Install required packages"""
    print("Installing required packages...")
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ])
        print("тЬУ Requirements installed successfully")
        return True
    except subprocess.CalledProcessError as e:
        print(f"тЬЧ Error installing requirements: {e}")
        return False

def create_directories():
    """Create necessary directories"""
    print("Creating directories...")
    
    directories = [
        "data",
        "data/models",
        "data/audio",
        "data/exports",
        "logs"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"тЬУ Created directory: {directory}")

def initialize_database():
    """Initialize the database"""
    print("Initializing database...")
    
    try:
        # Import after ensuring requirements are installed
        from src.database.database import init_database
        from src.database.crud import create_default_admin
        from src.database.database import get_db
        
        # Initialize database
        init_database()
        
        # Create default admin
        db = next(get_db())
        create_default_admin(db)
        
        print("тЬУ Database initialized successfully")
        return True
        
    except Exception as e:
        print(f"тЬЧ Error initializing database: {e}")
        return False

def download_models():
    """Download required AI models"""
    print("Downloading AI models...")
    
    try:
        # Try to download Whisper model
        import whisper
        print("Downloading Whisper model for Hindi speech recognition...")
        model = whisper.load_model("base")
        print("тЬУ Whisper model downloaded successfully")
        
    except ImportError:
        print("тЪа Whisper not available, Okay will use fallback speech recognition")
    except Exception as e:
        print(f"тЪа Error downloading Whisper model: {e}")
    
    try:
        # Try to download Hindi sentiment model
        from transformers import AutoTokenizer, AutoModelForSequenceClassification
        
        print("Downloading Hindi sentiment analysis model...")
        model_name = "cardiffnlp/twitter-roberta-base-sentiment-latest"
        
        tokenizer = AutoTokenizer.from_pretrained(model_name)
        model = AutoModelForSequenceClassification.from_pretrained(model_name)
        
        print("тЬУ Sentiment analysis model downloaded successfully")
        
    except ImportError:
        print("тЪа Transformers not available, will use keyword-based sentiment analysis")
    except Exception as e:
        print(f"тЪа Error downloading sentiment model: {e}")

def create_sample_data():
    """Create sample questionnaires and data"""
    print("Creating sample data...")
    
    try:
        from src.admin.questionnaire_manager import questionnaire_manager
        from src.database.database import get_db
        from src.database.crud import get_user_by_username, initialize_default_keywords, initialize_default_suggestions
        
        db = next(get_db())
        
        # Get admin user
        admin_user = get_user_by_username(db, "admin")
        if not admin_user:
            print("тЬЧ Admin user not found")
            return False
        
        # Load sample questionnaires
        result = questionnaire_manager.load_sample_questionnaires(db, admin_user.id)
        print(f"тЬУ Loaded {result['successful']} sample questionnaires")
        
        # Initialize default keywords
        initialize_default_keywords(db, admin_user.id)
        print("тЬУ Initialized default keywords")
        
        # Initialize default suggestions
        initialize_default_suggestions(db, admin_user.id)
        print("тЬУ Initialized default suggestions")
        
        return True
        
    except Exception as e:
        print(f"тЬЧ Error creating sample data: {e}")
        return False

def create_run_script():
    """Create run script for easy startup"""
    print("Creating run script...")
    
    run_script_content = """#!/usr/bin/env python3
\"\"\"
Run script for Army Mental Health Assessment System
\"\"\"
import subprocess
import sys
import os

def main():
    # Change to the correct directory
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    
    print("Starting Army Mental Health Assessment System...")
    print("Access the application at: http://localhost:8501")
    print("Press Ctrl+C to stop the application")
    print("-" * 50)
    
    try:
        # Run Streamlit app
        subprocess.run([
            sys.executable, "-m", "streamlit", "run", "src/app.py",
            "--server.port=8501",
            "--server.address=localhost",
            "--browser.gatherUsageStats=false"
        ])
    except KeyboardInterrupt:
        print("\\nApplication stopped.")
    except Exception as e:
        print(f"Error running application: {e}")

if __name__ == "__main__":
    main()
"""
    
    with open("run.py", "w", encoding="utf-8") as f:
        f.write(run_script_content)
    
    # Make executable on Unix systems
    if os.name != 'nt':
        os.chmod("run.py", 0o755)
    
    print("тЬУ Created run.py script")

def create_readme():
    """Create README file"""
    print("Creating README...")
    
    readme_content = """# рд╕реЗрдирд╛ рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдореВрд▓реНрдпрд╛рдВрдХрди рдкреНрд░рдгрд╛рд▓реА
# Army Mental Health Assessment System

рдПрдХ рд╡реНрдпрд╛рдкрдХ рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдореВрд▓реНрдпрд╛рдВрдХрди рдкреНрд░рдгрд╛рд▓реА рдЬреЛ рд╣рд┐рдВрджреА рднрд╛рд╖рд╛ рдореЗрдВ рд╕реИрдирд┐рдХреЛрдВ рдХреЗ рд▓рд┐рдП рдбрд┐рдЬрд╝рд╛рдЗрди рдХреА рдЧрдИ рд╣реИред

## рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВ (Features)

### ЁЯОп рдореБрдЦреНрдп рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВ
- **рд╣рд┐рдВрджреА рдкреНрд░рд╢реНрдирд╛рд╡рд▓реА**: рд╕реИрдирд┐рдХреЛрдВ рдХреЗ рд▓рд┐рдП рд╡рд┐рд╢реЗрд╖ рд░реВрдк рд╕реЗ рдбрд┐рдЬрд╝рд╛рдЗрди рдХреА рдЧрдИ рд╣рд┐рдВрджреА рдкреНрд░рд╢реНрдирд╛рд╡рд▓реА
- **рдЖрд╡рд╛рдЬрд╝ рд╕реЗ рдореВрд▓реНрдпрд╛рдВрдХрди**: рд╣рд┐рдВрджреА рдореЗрдВ рдмреЛрд▓рдХрд░ рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХрд╛ рдореВрд▓реНрдпрд╛рдВрдХрди
- **AI рд╡рд┐рд╢реНрд▓реЗрд╖рдг**: рдЙрдиреНрдирдд AI рдореЙрдбрд▓ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рднрд╛рд╡рдирд╛ рдФрд░ рдХреАрд╡рд░реНрдб рд╡рд┐рд╢реНрд▓реЗрд╖рдг
- **рд╡реНрдпрд╛рдкрдХ рд░рд┐рдкреЛрд░реНрдЯрд┐рдВрдЧ**: рд╡рд┐рд╕реНрддреГрдд рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд░рд┐рдкреЛрд░реНрдЯ рдФрд░ рд╕реБрдЭрд╛рд╡

### ЁЯФз рддрдХрдиреАрдХреА рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВ
- **Streamlit UI**: рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛-рдЕрдиреБрдХреВрд▓ рд╡реЗрдм рдЗрдВрдЯрд░рдлреЗрд╕
- **SQLite Database**: рд╕реНрдерд╛рдиреАрдп рдбреЗрдЯрд╛рдмреЗрд╕ рднрдВрдбрд╛рд░рдг
- **Hindi NLP**: рд╣рд┐рдВрджреА рднрд╛рд╖рд╛ рдкреНрд░рд╕рдВрд╕реНрдХрд░рдг
- **Voice Processing**: рдЖрд╡рд╛рдЬрд╝ рд╕реЗ рдЯреЗрдХреНрд╕реНрдЯ рд░реВрдкрд╛рдВрддрд░рдг
- **Admin Panel**: рдкреНрд░рд╢реНрдирд╛рд╡рд▓реА рдкреНрд░рдмрдВрдзрди рдХреЗ рд▓рд┐рдП рдПрдбрдорд┐рди рдкреИрдирд▓

## рд╕реНрдерд╛рдкрдирд╛ (Installation)

### рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдВ
- Python 3.8 рдпрд╛ рдЙрд╕рд╕реЗ рдКрдкрд░
- pip package manager

### рд╕реНрдерд╛рдкрдирд╛ рдЪрд░рдг

1. **Repository clone рдХрд░реЗрдВ:**
```bash
git clone <repository-url>
cd army_mental_health
```

2. **Setup script рдЪрд▓рд╛рдПрдВ:**
```bash
python setup.py
```

3. **Application рдЪрд▓рд╛рдПрдВ:**
```bash
python run.py
```

4. **Browser рдореЗрдВ рдЦреЛрд▓реЗрдВ:**
   - http://localhost:8501 рдкрд░ рдЬрд╛рдПрдВ

## рдЙрдкрдпреЛрдЧ (Usage)

### рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд▓реЙрдЧрд┐рди
- **Admin Login:**
  - Username: `admin`
  - Password: `admin123`

### рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рд▓рд┐рдП
1. рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ
2. "рдореВрд▓реНрдпрд╛рдВрдХрди рдХрд░реЗрдВ" рдЯреИрдм рдореЗрдВ рдЬрд╛рдПрдВ
3. рдкреНрд░рд╢реНрдирд╛рд╡рд▓реА рдЪреБрдиреЗрдВ рдФрд░ рдкреВрд░рд╛ рдХрд░реЗрдВ
4. рдпрд╛ "рдЖрд╡рд╛рдЬрд╝ рд╕реЗ рдореВрд▓реНрдпрд╛рдВрдХрди" рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ

### рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП
1. Admin рдХреЗ рд░реВрдк рдореЗрдВ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ
2. рдкреНрд░рд╢реНрдирд╛рд╡рд▓реА рдкреНрд░рдмрдВрдзрди
3. рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкреНрд░рдмрдВрдзрди
4. рд░рд┐рдкреЛрд░реНрдЯреНрд╕ рджреЗрдЦреЗрдВ

## рдлрд╝рд╛рдЗрд▓ рд╕рдВрд░рдЪрдирд╛

```
army_mental_health/
тФЬтФАтФА src/
тФВ   тФЬтФАтФА app.py                 # рдореБрдЦреНрдп Streamlit application
тФВ   тФЬтФАтФА database/              # рдбреЗрдЯрд╛рдмреЗрд╕ рдореЙрдбреНрдпреВрд▓
тФВ   тФЬтФАтФА models/                # AI рдореЙрдбрд▓реНрд╕
тФВ   тФЬтФАтФА admin/                 # рдПрдбрдорд┐рди рдЗрдВрдЯрд░рдлреЗрд╕
тФВ   тФФтФАтФА config.py              # рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди
тФЬтФАтФА data/                      # рдбреЗрдЯрд╛ рдлрд╝рд╛рдЗрд▓реЗрдВ
тФЬтФАтФА requirements.txt           # Python dependencies
тФЬтФАтФА setup.py                   # Setup script
тФФтФАтФА run.py                     # Run script
```

## рд╕рдорд╕реНрдпрд╛ рдирд┐рд╡рд╛рд░рдг (Troubleshooting)

### рд╕рд╛рдорд╛рдиреНрдп рд╕рдорд╕реНрдпрд╛рдПрдВ

1. **Audio processing рдирд╣реАрдВ рд╣реЛ рд░рд╣рд╛:**
   - PyAudio install рдХрд░реЗрдВ: `pip install pyaudio`
   - Windows рдкрд░: Microsoft Visual C++ Build Tools install рдХрд░реЗрдВ

2. **Hindi models download рдирд╣реАрдВ рд╣реЛ рд░рд╣реЗ:**
   - Internet connection check рдХрд░реЗрдВ
   - Firewall settings check рдХрд░реЗрдВ

3. **Database errors:**
   - `python setup.py` рдлрд┐рд░ рд╕реЗ рдЪрд▓рд╛рдПрдВ
   - data/ directory рдХреА permissions check рдХрд░реЗрдВ

## рдпреЛрдЧрджрд╛рди (Contributing)

1. Fork the repository
2. Create feature branch
3. Make changes
4. Submit pull request

## рд▓рд╛рдЗрд╕реЗрдВрд╕ (License)

рдпрд╣ рдкреНрд░реЛрдЬреЗрдХреНрдЯ MIT License рдХреЗ рддрд╣рдд рд╣реИред

## рд╕рдВрдкрд░реНрдХ (Contact)

рддрдХрдиреАрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред
"""
    
    with open("README.md", "w", encoding="utf-8") as f:
        f.write(readme_content)
    
    print("тЬУ Created README.md")

def main():
    """Main setup function"""
    print("=" * 60)
    print("Army Mental Health Assessment System - Setup")
    print("=" * 60)
    
    # Check Python version
    if sys.version_info < (3, 8):
        print("тЬЧ Python 3.8 or higher is required")
        sys.exit(1)
    
    print(f"тЬУ Python {sys.version_info.major}.{sys.version_info.minor} detected")
    
    # Setup steps
    steps = [
        ("Creating directories", create_directories),
        ("Installing requirements", install_requirements),
        ("Initializing database", initialize_database),
        ("Downloading AI models", download_models),
        ("Creating sample data", create_sample_data),
        ("Creating run script", create_run_script),
        ("Creating README", create_readme)
    ]
    
    success_count = 0
    
    for step_name, step_function in steps:
        print(f"\n{step_name}...")
        try:
            if step_function():
                success_count += 1
        except Exception as e:
            print(f"тЬЧ Error in {step_name}: {e}")
    
    print("\n" + "=" * 60)
    print(f"Setup completed: {success_count}/{len(steps)} steps successful")
    
    if success_count == len(steps):
        print("тЬУ Setup completed successfully!")
        print("\nTo start the application:")
        print("  python run.py")
        print("\nThen open: http://localhost:8501")
        print("\nDefault admin login:")
        print("  Username: admin")
        print("  Password: admin123")
    else:
        print("тЪа Setup completed with some issues")
        print("Check the error messages above and try running setup again")
    
    print("=" * 60)

if __name__ == "__main__":
    main()
